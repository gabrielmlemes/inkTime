generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  address            String?   @default("")
  phone              String?   @default("")
  status             Boolean   @default(true) // Aberto ou fechado
  timezone           String?
  stripe_customer_id String?
  times String[] @default([])

  subscription Subscription? // Each user can have one subscription
  services     Services[] // Each user can have multiple services
  reminders    Reminder[] // Each user can have multiple reminders
  appointments Appointment[] // Each user can have multiple appointments

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription {
  id      String  @id @default(uuid())
  status  String
  plan    Plan    @default(BASIC)
  priceId String?

  userId String @unique // Each subscription belongs to one user (studio)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Services {
  id          String  @id @default(uuid())
  name        String
  price       Int
  duration    Int // Duration in minutes
  description String?
  isActive    Boolean @default(true)

  userId String @unique // Each user (client) can have only one set of services
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[] // Each service can have multiple appointments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id          String @id @default(uuid())
  description String

  userId String // Each reminder belongs to one user (client)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String   @id @default(uuid())
  name        String
  clientEmail String
  clientPhone String?
  date        DateTime
  time        String
  notes       String?
  status      String   @default("scheduled") // scheduled, completed, canceled

  userId String // Each appointment belongs to one user (studio)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId String
  service   Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
